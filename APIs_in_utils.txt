# ----------------------------------------------------------------
# # # # # utils_Bestman.py - Base & Arm # # # # #
# ----------------------------------------------------------------
def get_joint_link_info(self):

# ----------------------------------------------------------------
# # # # # utils_Bestman.py - Base # # # # #
# ----------------------------------------------------------------
def navigate_base(self, goal_base_pose):
def get_base_pose(self):
def get_standing_map(self, object_position, radius = 1.0, resolution=0.03, x_max=10, y_max=10, enable_accurate_occupancy_map=True, enable_plot=True):
def compute_standing_position(self, object_position, standing_map, x_max=10, y_max=10, resolution=0.03):
def find_base_path(self, init_base_position, goal_base_position, x_max=10, y_max=10, resolution=0.03, enable_accurate_occupancy_map=True, enable_plot=True):
def move_base_to_next_waypoint(self, next_waypoint):
def rotate_base(self, yaw):
def sync_base_arm_pose(self):
def check_collision_navigation(self):

# ----------------------------------------------------------------
# # # # # utils_Bestman.py - Arm # # # # #
# ----------------------------------------------------------------
def adjust_arm_height(self, height):
def debug_set_joint_values(self):
def get_arm_joint_angle(self):
def set_arm_to_joint_angles(self, joint_angles):
def execute_trajectory(self, trajectory):
def move_arm_to_joint_angles(self, joint_angles):
def get_end_effector_info(self):
def joints_to_cartesian(self, joint_angles):
def cartesian_to_joints(self, position, orientation):
def rotate_end_effector(self, angle):
def move_end_effector_to_goal_position(self, end_effector_goal_pose):
def pick_place(self, object_id, object_goal_position, object_goal_orientation):
def active_gripper(self, object_id, value):
def calculate_IK_error(self, object_goal_position, object_goal_orientation):

# ----------------------------------------------------------------
# # # # # utils_Bestman.py - RL # # # # #
# ----------------------------------------------------------------
def reset_pos(self, seed=None, pos=None):
def get_current_pos(self):
def set_camera(self, robot_id: int, width: int = 224, height: int = 224):
def get_image(self, width, height):
def label_target_on_rgb_by_segmentation(self, rgb_img, seg_img, height=224, width=224, target_object_id=4, file_output_path="./outputs/target_rectangle.png"):
def forward(self, distance=0.25):
def rotate_left(self, degree=30):
def rotate_right(self, degree=30):
def stop(self):
def grasp(self, object_id):
def set_envs(self):

# ----------------------------------------------------------------
# # # # # utils_Kitchen_v0.py # # # # # 
# ----------------------------------------------------------------
def open_it(self, elementName, drawer_id, open_angle=None):
def close_it(self, elementName, drawer_id, open_angle=None):

# ----------------------------------------------------------------
# # # # # utils_Kitchen_v1.py # # # # # 
# ----------------------------------------------------------------
def parse_lisdf(self, file_path):
def compute_camera_angles(self, camera_pos, target_pos):
def load_models(self, models):
def open_it(self, model_id, joint_id, open_angle):
def close_it(self, model_id, joint_id, close_angle):

# ----------------------------------------------------------------
# # # # # utils_PbClient.py # # # # # 
# ----------------------------------------------------------------
def get_client(self):
def disconnect_pybullet(self):
def wait(self, x):
def run(self, x):
def enable_vertical_view(self, dist, position, yaw=0, pitch=-89.9):
def start_record(self, fileName):
def end_record(self, logId):
def get_appliance_joint_info(self, appliance_id):
def change_appliance_joint(self, appliance_id, joint_index, target_position, max_force=5):
def run_slider_and_update_position(self, x, name, min_val, max_val, initial_val, obj_id=None):
def load_object(self, model_path, object_position, object_orientation, obj_name):
def get_occupancy_network(self, object_id, x_max=10, y_max=10, resolution=0.1, enable_plot=False):
def generate_point_within_area(self, min_x, min_y, max_x, max_y):
def generate_point_within_area_with_fixed_z(self, min_x, min_y, max_x, max_y, fixed_z)
def generate_point_outside_area(self, min_x, min_y, max_x, max_y):
def get_bounding_box(self, object_id):
def check_collision_xyz(self, box1, box2):
def check_collision_xy(self, box1, box2):

# ----------------------------------------------------------------
# # # # # utils_PbVisualizer.py # # # # # 
# ----------------------------------------------------------------
def crop_image(self, image, center, size):
def get_depth_image(self, basePos, cameraPos, cameraUp, enable_show=False, enable_save=False)
def draw_aabb(self, object_id):
def draw_aabb_link(self, object_id, link_id=-1):
def change_arm_color(self, arm_id, light_color=True):
def set_robot_visual_color(self):
def set_arm_color_light(self, arm_id):
def visualize_path(self, path):
def draw_line(self, start_pos, target_pos, color=[1, 0, 0], width=3.0):

# ----------------------------------------------------------------
# # # # # utils_PbOMPL.py # # # # # 
# ----------------------------------------------------------------
def set_planner(self, planner):
def set_target(self, target_id):
def set_target_pos(self, target_pos):
def set_obstacles(self, obstacles):
def add_obstacles(self, item_id):
def remove_obstacles(self, obstacle_id):
def store_obstacles(self):
def check_obstacles(self):
def get_scene_items(self, display=True):
def add_scene_obstacles(self, display=False):
def execute(self, path):
def compute_distance(self, end_effector_link_index):
def plan_grasp(self, start, goal):
def move_end_effector_to_goal_position(self, start, goal, end_effector_link_index):
def grasp_object(self, start, goal, end_effector_link_index):  # TODO refactor